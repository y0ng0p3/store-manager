{"version":3,"sources":["components/Header.component.tsx","components/ConfirmAction.dialog.tsx","stores/product.store.ts","modals/NewProduct.modal.tsx","components/ProductItem.component.tsx","components/NewProduct.component.tsx","components/PieChart.component.tsx","components/ScatterPlot.component.tsx","pages/ProductListing.page.tsx","pages/ProductVisualization.page.tsx","App.tsx","reportWebVitals.ts","theme/default.theme.ts","index.tsx"],"names":["HeaderComponent","className","to","DefaultButton","text","dialogStyles","main","maxWidth","dragOptions","moveMenuItemText","closeMenuItemText","menu","ContextualMenu","keepInBounds","ConfirmActionDialog","mergeStyles","hiddenContentStyle","renderTrigger","renderPositive","renderNegative","title","message","negativeText","positiveText","onPositive","useBoolean","hideDialog","toggleHideDialog","toggle","isDraggable","labelId","useId","subTextId","modalProps","React","useMemo","titleAriaId","subtitleAriaId","isBlocking","styles","undefined","dialogContentProps","type","DialogType","close","closeButtonAriaLabel","subText","Dialog","hidden","onDismiss","DialogFooter","onClick","PrimaryButton","style","backgroundColor","borderColor","useProductStore","create","set","get","products","map","_","name","description","price","quantity_in_stock","id","push","product","update","newProducts","remove","filter","defaultProdut","validationSchema","Yup","required","NewProductModal","props","initialProduct","useState","isModalOpen","setIsModalOpen","cancelIcon","iconName","toggleHideModal","initialValues","formik","useFormik","onSubmit","values","onSubmitProps","setSubmitting","uuid","console","log","Modal","isOpen","containerClassName","IconButton","iconProps","ariaLabel","handleSubmit","TextField","label","getFieldProps","value","multiline","suffix","handleReset","disabled","dirty","isValid","isSubmitting","ProductItemComponent","EditIcon","DeleteIcon","deleteProduct","Text","variant","fontWeight","trigger","renderModal","TooltipHost","content","renderDialog","setOpen","NewProductComponent","PieChartComponent","data","a","b","c","d","e","entries","Object","divRef","useRef","randomColors","i","dataLenght","Math","floor","random","toString","color","d3","range","useEffect","radius","min","svg","current","append","attr","width","height","data_ready","pie","selectAll","join","innerRadius","outerRadius","ref","ScatterPlotComponent","maxPrice","margin","x","domain","call","y","enter","ProductListingPage","ProductVisualizationPage","forEach","length","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","blackAndWhiteTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","loadTheme","initializeIcons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edb0ee78.chunk.js","sourcesContent":["import React, { useState, } from 'react'\nimport { DefaultButton } from '@fluentui/react'\nimport { NavLink } from 'react-router-dom'\n\nexport interface IHeaderProps {\n\n}\n\nexport const HeaderComponent: React.FC<IHeaderProps> = () => {\n  return (\n    <nav className='app__header'>\n      <NavLink to=\"listing\">\n        <DefaultButton\n          text='Listing'\n        />\n      </NavLink>\n      <NavLink to=\"visualize\">\n        <DefaultButton\n          text='Visualize'\n        />\n      </NavLink>\n    </nav>\n  )\n}\n","import React, { ReactNode, useState, } from 'react'\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react';\nimport { PrimaryButton, DefaultButton } from '@fluentui/react';\nimport { hiddenContentStyle, mergeStyles } from '@fluentui/react';\nimport { Toggle } from '@fluentui/react';\nimport { ContextualMenu } from '@fluentui/react';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\n\nexport interface IConfirmActionProps {\n  renderTrigger?: (\n    setOpen: () => void,\n    renderDialog: () => ReactNode\n  ) => ReactNode,\n  renderPositive?: (setOpen: () => void) => void,\n  onPositive?: () => void,\n  renderNegative?: (setOpen: () => void) => void,\n  title: string, negativeText?: string,\n  message:string,\n  positiveText?: string,\n}\n\nconst dialogStyles = { main: { maxWidth: 450 } };\nconst dragOptions = {\n  moveMenuItemText: 'Move',\n  closeMenuItemText: 'Close',\n  menu: ContextualMenu,\n  keepInBounds: true,\n};\nconst screenReaderOnly = mergeStyles(hiddenContentStyle);\n\n\nexport const ConfirmActionDialog: React.FC<IConfirmActionProps> = ({\n  renderTrigger,\n  renderPositive,\n  renderNegative,\n  title = \"shared:ooopss\",\n  message = '',\n  negativeText = \"Annuler\",\n  positiveText = \"shared:proceed\",\n  onPositive,\n  ...props\n}) => {\n  const [hideDialog, { toggle: toggleHideDialog }] = useBoolean(true);\n  const [isDraggable, { toggle: toggleIsDraggable }] = useBoolean(false);\n  const labelId: string = useId('dialogLabel');\n  const subTextId: string = useId('subTextLabel');\n\n  // Set properties of the modal\n  const modalProps = React.useMemo(\n    () => ({\n      titleAriaId: labelId,\n      subtitleAriaId: subTextId,\n      isBlocking: false,\n      styles: dialogStyles,\n      dragOptions: isDraggable ? dragOptions : undefined,\n    }),\n    [isDraggable, labelId, subTextId],\n  );\n\n  // Set dialog properties\n  const dialogContentProps = {\n    type: DialogType.close,\n    title,\n    closeButtonAriaLabel: negativeText,\n    subText: message,\n  };\n\n  const renderDialog = () => (\n    <Dialog\n      hidden={hideDialog}\n      onDismiss={toggleHideDialog}\n      dialogContentProps={dialogContentProps}\n      modalProps={modalProps}\n    >\n      <DialogFooter>\n        {renderNegative ? (\n          <>{renderNegative(toggleHideDialog)}</>\n        ) : (\n          <DefaultButton\n            onClick={toggleHideDialog}\n            text={\n              negativeText\n            }\n          />\n        )}\n        {renderPositive ? (\n          <>{renderPositive(toggleHideDialog)}</>\n        ) : (\n          <PrimaryButton\n            style={{\n              backgroundColor: \"var(--color-danger)\",\n              borderColor: \"transparent\"\n            }}\n            onClick={() => {\n              toggleHideDialog()\n              if (onPositive) {\n                onPositive()\n              }\n            }}\n            text={\n              positiveText\n            }\n          />\n        )}\n      </DialogFooter>\n    </Dialog>\n  )\n\n    return (\n      <>\n        {renderTrigger && renderTrigger(toggleHideDialog, renderDialog)}\n      </>\n    )\n}\n","import { IProduct } from 'types';\nimport create, { SetState, GetState } from 'zustand';\n\ntype ProductStore = {\n    products: IProduct[];\n    push: (product: IProduct) => void;\n    update: (product: IProduct) => void;\n    remove: (id: string) => void;\n};\n\nexport const useProductStore = create<ProductStore>(\n    (\n        set: SetState<ProductStore>,\n        get: GetState<ProductStore>\n    ) => ({\n        // All products\n        products: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(_ => ({\n            name: `Name ${_}`,\n            description: `Long product description goes in here for very long time`,\n            price: _ * 200,\n            quantity_in_stock: _ * 40,\n            id: `${_}`\n        })),\n\n        // Method that allows to add a product in the store\n        push: (product: IProduct): void => {\n            const { products } = get();\n            set({ products: [product, ...products] });\n        },\n\n        // Method that allows to edit a product in the store\n        update: (product: IProduct): void => {\n            const { products } = get();\n            const newProducts = products.map(_ => {\n                if (_.id === product.id) return product\n                return _\n            })\n            set({ products: newProducts });\n        },\n\n        // Method that allows to remove a product from the store\n        remove: (id: string) => {\n            const { products } = get();\n            set({ products: products.filter(_ => _.id !== id) });\n        }\n    })\n)\n","import React, { ReactNode, useState } from \"react\";\nimport {\n  DefaultButton,\n  IconButton,\n  IIconProps,\n  Modal,\n  PrimaryButton,\n  TextField,\n} from \"@fluentui/react\";\nimport { IProduct } from \"types\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { useProductStore } from \"stores\";\nimport * as uuid from 'uuid'\n\nconst defaultProdut: IProduct = {\n  name: \"\",\n  description: \"\",\n  price: 0,\n  quantity_in_stock: 0,\n  id: \"\",\n};\n\n// Schema validation to sure us that the user enter right values of form fields\nconst validationSchema = Yup.object({\n  name: Yup.string().required(\"Champ Obligatoire !\"),\n  price: Yup.number().required(\"Champ Obligatoire !\"),\n  quantity_in_stock: Yup.number().required(\"Champ Obligatoire !\"),\n});\n\nexport interface INewProductModalProps {\n  renderTrigger?: (\n    setOpen: () => void,\n    renderDialog: () => ReactNode\n  ) => ReactNode;\n  initialProduct?: IProduct;\n}\n\nexport const NewProductModal: React.FC<INewProductModalProps> = (props) => {\n  const { renderTrigger, initialProduct = defaultProdut } = props;\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const cancelIcon: IIconProps = { iconName: \"Cancel\" };\n\n  const toggleHideModal = () => setIsModalOpen(!isModalOpen);\n\n  const { update, push } = useProductStore();\n\n  const initialValues = {\n    name: initialProduct.name,\n    description: initialProduct.description,\n    price: initialProduct.price,\n    quantity_in_stock: initialProduct.quantity_in_stock,\n    id: initialProduct.id,\n    \n  };\n\n  // Submit method to store changes. It's automatically triggered by default with formik\n  const onSubmit = (values: any, onSubmitProps: any) => {\n    onSubmitProps.setSubmitting(true)\n    if (initialProduct.id && initialProduct.id !== \"\") {\n      update(values)\n    } else {\n      values.id = uuid.v4()\n      push(values)\n    }\n    console.log(\"updated data\", values);\n    onSubmitProps.setSubmitting(false);\n    toggleHideModal()\n  };\n\n  // Set formik variable\n  const formik = useFormik({\n    initialValues,\n    onSubmit,\n    validationSchema,\n  });\n\n  //initialize formik here with default values coming from initialProduct\n\n  const renderModal = () => (\n    <Modal\n      titleAriaId={\"titleId\"}\n      isOpen={isModalOpen}\n      onDismiss={toggleHideModal}\n      isBlocking={false}\n      containerClassName=\"modal__container\"\n    >\n      <div className=\"modal__header\">\n        {\n          (initialProduct.id && initialProduct.id !== \"\") ?\n            <span id={\"titleId\"} className=\"ms-fontSize-24 ms-fontWeight-semibold\">\n              Editer le produit: {initialProduct.name}\n            </span> :\n            <span id={\"titleId\"} className=\"ms-fontSize-24 ms-fontWeight-semibold\">\n              Ajouter un produit\n            </span>\n        }\n        <IconButton\n          className=\"modal__rot\"\n          iconProps={cancelIcon}\n          ariaLabel=\"Close popup modal\"\n          onClick={toggleHideModal}\n        />\n      </div>\n      <form className=\"modal__body na_container\" onSubmit={formik.handleSubmit}>\n        <TextField\n          label={\"Nom du Product\"}\n          // name=\"name\"\n          {...formik.getFieldProps(\"name\")}\n          value={formik.values.name}\n        />\n        <TextField\n          multiline={true}\n          label={\"Description du Produit\"}\n          {...formik.getFieldProps(\"description\")}\n          value={formik.values.description}\n        />\n        <TextField\n          label={\"Prix\"}\n          suffix=\"XAF\"\n          type=\"number\"\n          {...formik.getFieldProps(\"price\")}\n          value={formik.values.price + \"\"}\n        />\n        <TextField\n          label={\"Quantité en Stock\"}\n          type=\"number\"\n          {...formik.getFieldProps(\"quantity_in_stock\")}\n          value={formik.values.quantity_in_stock + \"\"}\n        />\n      <div className=\"modal__footer\">\n        <DefaultButton\n          text={\"Réinitialiser\"}\n          onClick={formik.handleReset}\n        />\n        <PrimaryButton\n          text={\"Sauvegarder\"}\n          type=\"submit\"\n          disabled={!(formik.dirty && formik.isValid) || formik.isSubmitting}\n        />\n      </div>\n      </form>\n    </Modal>\n  );\n\n  return <>{renderTrigger && renderTrigger(toggleHideModal, renderModal)}</>;\n};\n","import React, { useState, } from 'react'\nimport { IconButton, IIconProps, PrimaryButton, Text, TooltipHost } from '@fluentui/react'\nimport { ConfirmActionDialog } from './ConfirmAction.dialog';\nimport { NewProductModal } from 'modals';\nimport { IProduct } from 'types';\nimport { useProductStore } from 'stores'\n\nexport interface IProductItemProps {\n  product: IProduct\n}\n\nexport const ProductItemComponent: React.FC<IProductItemProps> = (props) => {\n  const EditIcon: IIconProps = { iconName: 'Edit' };\n  const DeleteIcon: IIconProps = { iconName: 'Delete' };\n\n  const { product } = props\n\n  const { remove } = useProductStore()\n\n  const deleteProduct = () => {\n    console.log({ message: 'Deleting product' })\n    remove(product.id)\n  }\n\n  return (\n    <>\n      <div className=\"product__item\">\n        <Text variant='xLarge'>{product.name}</Text>\n        <Text variant='mediumPlus'>{ product.price }</Text>\n        <Text variant='large'>{ product.description }</Text>\n        <div className=\"product--stock\" style={product.quantity_in_stock < 5 ? { fontWeight: 'bold' } : {}}>\n          <span>Quantité en stock: </span>\n          <span>{product.quantity_in_stock}</span>\n        </div>\n        <div className=\"product--actions\">\n          {/* Modal call as a component which allows to add or edit a product depending of if we have an initial product or not */}\n          <NewProductModal\n            renderTrigger={(trigger, renderModal) => (\n              <TooltipHost\n                content={'Editer'}\n                id={`ljsd_edit`}\n              >\n                {renderModal()}\n                <IconButton\n                  iconProps={EditIcon}\n                  title=\"Editer\"\n                  ariaLabel=\"Editer\"\n                  onClick={trigger}\n                />\n              </TooltipHost>\n\n            )}\n            initialProduct={product}\n          />\n\n          {/* Dialog component which called to confirm the deleting of a product */}\n          <ConfirmActionDialog\n            title=\"Suppression d'un produit\"\n            message={'Êtes-vous sûre de vouloir supprimer ce produit? Cette action est irreversible.'}\n            renderTrigger={(trigger, renderDialog) => (\n              <>\n                <TooltipHost\n                  content={'Supprimer'}\n                  id={`sdoiwe_delete`}\n                >\n                  <IconButton\n                    iconProps={DeleteIcon}\n                    title=\"Supprimer\"\n                    ariaLabel=\"Supprimer\"\n                    onClick={trigger}\n                  />\n                </TooltipHost>\n                {renderDialog()}\n              </>\n            )}\n            renderPositive={(setOpen) => (\n              <PrimaryButton\n                text={'Supprimer'}\n                onClick={deleteProduct}\n              />\n            )}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { Text, TooltipHost } from '@fluentui/react'\nimport { NewProductModal } from 'modals'\n\nexport interface INewProductProps {\n\n}\n\nexport const NewProductComponent: React.FC<INewProductProps> = () => {\n\n  return (\n    <>\n      <NewProductModal\n        renderTrigger={(trigger, renderModal) => (\n          <button className=\"product__new\"\n            onClick={trigger}\n          >\n            {renderModal()}\n            <TooltipHost\n              content={'Nouveau Produit'}\n              id={`lksdoiwe`}\n            >\n              <Text variant='large'>Nouveau Produit</Text>\n            </TooltipHost>\n          </button>\n        )}\n      />\n    </>\n  )\n}\n","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nexport interface IPieChartProps {\n  data: Record<string, string>;\n  dataLenght: number;\n}\n\nexport const PieChartComponent: React.FC<IPieChartProps> = (props) => {\n  const defaultData = { a: 9, b: 20, c: 30, d: 8, e: 12 };\n\n  // Create our data\n  const { data = defaultData } = props;\n  const entries = Object.entries(data);\n\n  // create a reference of the HTML element where we'll display our chart\n  const divRef = useRef<HTMLDivElement>(null);\n\n  // set the color scale\n  let randomColors: string[] = [];\n  for (let i = 0; i < props.dataLenght; i++) {\n    randomColors = [\n      ...randomColors,\n      \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n    ];\n  }\n  const color = d3.scaleOrdinal().range(randomColors);\n\n  const drawChart = () => {\n    // set the dimensions and margins of the graph\n    const width = 450,\n      height = 450,\n      margin = 40;\n\n    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n    const radius = Math.min(width, height) / 2 - margin;\n\n    // append the svg object to the div referenced by 'divRef'\n    const svg = d3\n      .select(divRef.current)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Compute the position of each group on the pie:\n    const pie = d3.pie().value(function (d: any) {\n      return d[1];\n    });\n    //@ts-ignore\n    const data_ready = pie(entries);\n\n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    svg\n      .selectAll(\"whatever\")\n      .data(data_ready)\n      .join(\"path\")\n      //@ts-ignore\n      .attr(\"d\", d3.arc().innerRadius(0).outerRadius(radius))\n      // .attr('fill', function (d:any) { return (color(d.data[1])) })\n      //@ts-ignore\n      .attr(\"fill\", (d: any) => color(d.data[1]))\n      .attr(\"stroke\", \"#ccc\")\n      .style(\"stroke-width\", \"2px\")\n      .style(\"opacity\", 0.7);\n  };\n\n  useEffect(drawChart, []);\n\n  return (\n    <>\n      <h3>Représentation des quantités sur les produits.</h3>\n      <div className=\"Chart\">\n        <div ref={divRef}> </div>\n        <div>\n          {entries.map((_) => (\n            <span className=\"legend\">\n              <div\n                style={{ backgroundColor: `${color(_[0])}` }}\n                className=\"chart_color\"\n              ></div>{\" \"}\n              <span>{_[0]} ({_[1]})</span>\n            </span>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useRef, useEffect, } from 'react'\nimport * as d3 from 'd3'\nimport { useProductStore } from 'stores';\n\nexport interface IScatterPlotProps {\n  \n}\n\nexport const ScatterPlotComponent: React.FC<IScatterPlotProps> = () => {\n  const { products } = useProductStore()\n\n  const maxPrice = d3.max(products, (d) => d.price!);\n\n  const divRef = useRef<HTMLDivElement>(null);\n\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n  const width = 460 - margin.left - margin.right;\n  const height = 400 - margin.top - margin.bottom;\n\n  // set the color scale\n  let randomColors: string[] = [];\n  for (let i = 0; i < 1000; i++) {\n    randomColors = [\n      ...randomColors,\n      \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n    ];\n  }\n\n  const drawGraph = () => {\n    const svg = d3\n      .select(divRef.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Add X axis\n    var x = d3\n      .scalePoint()\n      .domain(products.map((_) => _.name))\n      .range([0, width]);\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var y = d3\n      .scaleLinear()\n      .domain([0, (maxPrice || 0) + 100])\n      .range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y));\n\n    // Add dots\n    svg\n      .append(\"g\")\n      .selectAll(\"dot\")\n      .data(products)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", function (d) {\n        return x(d.name)!;\n      })\n      .attr(\"cy\", function (d) {\n        return y(d.price);\n      })\n      .attr(\"r\", function (d) {\n        return d.quantity_in_stock * 0.05;\n      })\n      .style(\"fill\", \"#69b3a2\");\n  };\n\n  useEffect(drawGraph, []);\n\n  return (\n    <>\n      <h3>Représentation des produits sur les prix et les quantité.</h3>\n      <div className=\"Chart\">\n        <div ref={divRef}> </div>\n        <div>\n          {products.map((_) => (\n            <span className=\"legend\">\n              <div\n                className=\"chart_color\"\n              ></div>{\" \"}\n              <span>\n                {_.name} ({_.price})\n              </span>\n            </span>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { ProductItemComponent, NewProductComponent } from \"components\";\nimport { useProductStore } from \"stores\";\nexport interface IProductListingProps {}\n\nexport const ProductListingPage: React.FC<IProductListingProps> = () => {\n  const { products } = useProductStore();\n  return (\n    <div className=\"product__listing\">\n      <NewProductComponent />\n      {products.map((_) => (\n        <ProductItemComponent key={_.id} product={_} />\n      ))}\n    </div>\n  );\n};\n","import { ScatterPlotComponent } from 'components'\nimport { PieChartComponent } from 'components/PieChart.component'\nimport React from 'react'\nimport { useProductStore } from 'stores'\n\nexport interface IProductVisualizationProps {\n\n}\n\nexport const ProductVisualizationPage: React.FC<IProductVisualizationProps> = () => {\n  const { products } = useProductStore()\n  let data = {};\n  products.forEach(\n    (_) =>\n      (data = { ...data, [_.name]: _.quantity_in_stock })\n  );\n  return (\n    <div className='visualizer'>\n      <PieChartComponent data={data} dataLenght={products.length} />\n      <ScatterPlotComponent />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router';\nimport {\n  ProductVisualizationPage,\n  ProductListingPage,\n} from 'pages'\nimport { HeaderComponent } from 'components'\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <HeaderComponent />\n\n      <main className=\"app__main\">\n        <Switch>\n          <Route\n            path=\"/visualize\"\n            component={ProductVisualizationPage}\n          />\n          <Route\n            path=\"/listing\"\n            // exact={true}\n            component={ProductListingPage}\n          />\n          <Redirect to=\"listing\" />\n        </Switch>\n      </main>\n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport { createTheme } from '@fluentui/react';\n\nexport const blackAndWhiteTheme = createTheme({\n  palette: {\n    themePrimary: '#191919',\n    themeLighterAlt: '#e3e3e3',\n    themeLighter: '#cacaca',\n    themeLight: '#b1b1b1',\n    themeTertiary: '#989898',\n    themeSecondary: '#7e7e7e',\n    themeDarkAlt: '#656565',\n    themeDark: '#4c4c4c',\n    themeDarker: '#333333',\n    neutralLighterAlt: '#eceff3',\n    neutralLighter: '#e8ebef',\n    neutralLight: '#dfe1e5',\n    neutralQuaternaryAlt: '#cfd2d6',\n    neutralQuaternary: '#c6c8cc',\n    neutralTertiaryAlt: '#bec0c4',\n    neutralTertiary: '#8ea4bc',\n    neutralSecondary: '#718ba7',\n    neutralPrimaryAlt: '#577391',\n    neutralPrimary: '#10243a',\n    neutralDark: '#2d4866',\n    black: '#1d3650',\n    white: '#f2f5fa',\n  }});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { blackAndWhiteTheme } from './theme';\nimport { initializeIcons, loadTheme } from '@fluentui/react';\nimport { BrowserRouter } from 'react-router-dom';\n\nloadTheme(blackAndWhiteTheme)\ninitializeIcons()\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}